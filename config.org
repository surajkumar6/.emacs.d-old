#+TITLE: Emacs configuration

* Toggle full screen mode

#+BEGIN_SRC emacs-lisp
  (toggle-frame-fullscreen)
#+END_SRC
* Set personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Suraj Kumar Reddy"
        user-mail-address "suraj@gmail.com"
        calendar-latitude 17.3
        calendar-longitude -78.4
        calendar-location-name "Hyderabad, IND")
#+END_SRC
* load =misc-cmds.el=
A set of useful functions. Source: [[https://github.com/emacsmirror/emacswiki.org/blob/master/misc-cmds.el][misc-cmds.el]]

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/misc-cmds.el")
#+END_SRC
* Package management
#+BEGIN_SRC emacs-lisp
    (let ((default-directory "~/.emacs.d"))
      (normal-top-level-add-subdirs-to-load-path))
      (require 'package)

    (defvar my-packages
      '(
        use-package
        diminish
        bind-key
        ))

    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/") t)

    (add-to-list 'package-archives
                 '("org" . "http://orgmode.org/elpa/") t)

    (when (not package-archive-contents)
      (package-refresh-contents))
    (package-initialize)

    (dolist (p my-packages)
      (when (not (package-installed-p p))
        (package-install p)))

  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)
#+END_SRC
* Use sensible defaults
  Use [[https://github.com/surajkumar6/emacs-config/blob/master/resources/sensible-defaults.el][sensible-defaults.el]] for some basic settings

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC
* Enable better defaults

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :config
    (message "better-defaults loaded"))
#+END_SRC
* Shell

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/multi-term.el")
  (require 'multi-term)
  (setq multi-term-program "/bin/zsh")
#+END_SRC
* UI Preferences
** Disable toolbars and menus

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC
** Use =global-prettify-symbols-mode=

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable =global-hl-line-mode= to highlight current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Enable line numbers globally

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
#+END_SRC
** =rainbow-delimeters=
Rainbow delimeters show matching braces with same color

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :config
    (message "rainbow-delimeters loaded"))
#+END_SRC
** =all-the-icon=
   A collection of icons and fonts(mainly used for neotree)

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :defer t
    :config
    (message "all-the-icons loaded"))
#+END_SRC
** =page-break-lines=
Displays ugly form feed characters as tidy horizontal rules

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (message "page-break-lines loaded"))
#+END_SRC
** =dashboard=
A startup dashboard with widgets

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; Set the title
    (setq dashboard-banner-logo-title "Welcome Suraj")
    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Set the number of items in each widget
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)))
    (message "dashboard loaded"))
#+END_SRC
** =doom-themes=
A Doon inspired theme for emacs

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-enable-bold nil) ;; Disable bolding universally
    (setq doom-enable-italic nil) ;; Disable italics universally
    ;;(setq doom-one-brighter-modeline t) ;; Enable brighter mode line
    (setq doom-one-brighter-comments t) ;; Enable brighter comments
    (load-theme 'doom-one t)
    (message "doom-theme loaded"))
#+END_SRC
** Modeline utils

#+BEGIN_SRC emacs-lisp
  (defvar doom-memoized-table (make-hash-table :test 'equal :size 10)
    "A lookup table containing memoized functions. The keys are argument lists,
  and the value is the function's return value.")

  (defun doom-memoize (name)
    "Memoizes an existing function. NAME is a symbol."
    (let ((func (symbol-function name)))
      (put name 'function-documentation
           (concat (documentation func) " (memoized)"))
      (fset name
            `(lambda (&rest args)
               (let ((key (cons ',name args)))
                 (or (gethash key doom-memoized-table)
                     (puthash key (apply ',func args)
                              doom-memoized-table)))))))

  (defmacro def-memoized! (name arglist &rest body)
    "Create a memoize'd function. NAME, ARGLIST, DOCSTRING and BODY
  have the same meaning as in `defun'."
    (declare (indent defun) (doc-string 3))
    `(progn
       (defun ,name ,arglist ,@body)
       (doom-memoize ',name)))

  (defmacro def-modeline-segment! (name &rest forms)
    "Defines a modeline segment and byte compiles it."
    (declare (indent defun) (doc-string 2))
    (let ((sym (intern (format "doom-modeline-segment--%s" name))))
      `(progn
         (defun ,sym () ,@forms)
         ,(unless (bound-and-true-p byte-compile-current-file)
            `(let (byte-compile-warnings)
               (byte-compile #',sym))))))

  (defsubst doom--prepare-modeline-segments (segments)
    (let (segs)
      (dolist (seg segments (nreverse segs))
        (push (if (stringp seg)
                  seg
                (list (intern (format "doom-modeline-segment--%s" (symbol-name seg)))))
              segs))))

  (defmacro def-modeline! (name lhs &optional rhs)
    "Defines a modeline format and byte-compiles it. NAME is a symbol to identify
  it (used by `doom-modeline' for retrieval). LHS and RHS are lists of symbols of
  modeline segments defined with `def-modeline-segment!'.
  Example:
    (def-modeline! minimal
      (bar matches \" \" buffer-info)
      (media-info major-mode))
    (doom-set-modeline 'minimal t)"
    (let ((sym (intern (format "doom-modeline-format--%s" name)))
          (lhs-forms (doom--prepare-modeline-segments lhs))
          (rhs-forms (doom--prepare-modeline-segments rhs)))
      `(progn
         (defun ,sym ()
           (let ((lhs (list ,@lhs-forms))
                 (rhs (list ,@rhs-forms)))
             (list lhs
                   (propertize
                    " " 'display
                    `((space :align-to (- (+ right right-fringe right-margin)
                                          ,(+ 1 (string-width (format-mode-line rhs)))))))
                   rhs)))
         ,(unless (bound-and-true-p byte-compile-current-file)
            `(let (byte-compile-warnings)
               (byte-compile #',sym))))))

  (defun doom-modeline (key)
    "Returns a mode-line configuration associated with KEY (a symbol). Throws an
  error if it doesn't exist."
    (let ((fn (intern (format "doom-modeline-format--%s" key))))
      (when (functionp fn)
        `(:eval (,fn)))))

  (defun doom-set-modeline (key &optional default)
    "Set the modeline format. Does nothing if the modeline KEY doesn't exist. If
  DEFAULT is non-nil, set the default mode-line for all buffers."
    (let ((modeline (doom-modeline key)))
      (when modeline
        (setf (if default
                  (default-value 'mode-line-format)
                (buffer-local-value 'mode-line-format (current-buffer)))
              modeline))))
#+END_SRC
** Modeline

#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'subr-x))

  (line-number-mode -1)

  ;; all-the-icons doesn't work in the terminal, so we "disable" it.
  (unless (display-graphic-p)
    (defalias 'all-the-icons-octicon    #'ignore)
    (defalias 'all-the-icons-faicon     #'ignore)
    (defalias 'all-the-icons-fileicon   #'ignore)
    (defalias 'all-the-icons-wicon      #'ignore)
    (defalias 'all-the-icons-alltheicon #'ignore))

  (use-package all-the-icons :demand t
    :when (display-graphic-p))

  (use-package eldoc-eval :demand t
    :config
    ;; Show eldoc in the mode-line with `eval-expression'
    (defun +doom-modeline--show-eldoc (input)
      "Display string STR in the mode-line next to minibuffer."
      (with-current-buffer (eldoc-current-buffer)
        (let* ((str              (and (stringp input) input))
               (mode-line-format (or (and str (or (doom-modeline 'eldoc) str))
                                     mode-line-format))
               mode-line-in-non-selected-windows)
          (force-mode-line-update)
          (sit-for eldoc-show-in-mode-line-delay))))

    (setq eldoc-in-minibuffer-show-fn #'+doom-modeline--show-eldoc)
    (eldoc-in-minibuffer-mode +1))


  ;;; Flash the mode-line on error
  ;; TODO More flexible colors (only suits dark themes)
  ;; FIXME fast key-repeat can make the mode-line bg get stuck (rare)
  (defvar doom--visual-bell-old-bg nil)
  (defun doom-visual-bell ()
    "Blink the mode-line red briefly."
    (unless doom--visual-bell-old-bg
      (setq doom--visual-bell-old-bg (face-background 'mode-line)))
    (set-face-background 'mode-line "#54252C")
    (run-with-timer
     0.1 nil
     (lambda () (set-face-background 'mode-line doom--visual-bell-old-bg))))
  (setq ring-bell-function #'doom-visual-bell
        visible-bell nil)


  ;; Keep `+doom-modeline-current-window' up-to-date
  (defvar +doom-modeline-current-window (frame-selected-window))
  (defun +doom-modeline|set-selected-window (&rest _)
    "Sets `+doom-modeline-current-window' appropriately"
    (let ((win (frame-selected-window)))
      (unless (minibuffer-window-active-p win)
        (setq +doom-modeline-current-window win))))

  (add-hook 'window-configuration-change-hook #'+doom-modeline|set-selected-window)
  (add-hook 'focus-in-hook #'+doom-modeline|set-selected-window)
  (advice-add #'handle-switch-frame :after #'+doom-modeline|set-selected-window)
  (advice-add #'select-window :after #'+doom-modeline|set-selected-window)



  ;;
  ;; Variables
  ;;

  (defvar +doom-modeline-height 29
    "How tall the mode-line should be (only respected in GUI emacs).")

  (defvar +doom-modeline-bar-width 3
    "How wide the mode-line bar should be (only respected in GUI emacs).")

  (defvar +doom-modeline-vspc
    (propertize " " 'face 'variable-pitch)
    "TODO")

  ;; externs
  (defvar anzu--state nil)
  (defvar evil-mode nil)
  (defvar evil-state nil)
  (defvar evil-visual-selection nil)
  (defvar iedit-mode nil)


  ;;
  ;; Custom faces
  ;;

  (defgroup +doom-modeline nil
    ""
    :group 'doom)

  (defface doom-modeline-buffer-path
    '((t (:inherit mode-line-emphasis :bold t)))
    "Face used for the dirname part of the buffer path."
    :group '+doom-modeline)

  (defface doom-modeline-buffer-file
    '((t (:inherit mode-line-buffer-id)))
    "Face used for the filename part of the mode-line buffer path."
    :group '+doom-modeline)

  (defface doom-modeline-buffer-modified
    '((t (:inherit error :background nil :bold t)))
    "Face used for the 'unsaved' symbol in the mode-line."
    :group '+doom-modeline)

  (defface doom-modeline-buffer-major-mode
    '((t (:inherit mode-line-emphasis :bold t)))
    "Face used for the major-mode segment in the mode-line."
    :group '+doom-modeline)

  (defface doom-modeline-highlight
    '((t (:inherit mode-line-emphasis)))
    "Face for bright segments of the mode-line."
    :group '+doom-modeline)

  (defface doom-modeline-panel
    '((t (:inherit mode-line-highlight)))
    "Face for 'X out of Y' segments, such as `+doom-modeline--anzu', `+doom-modeline--evil-substitute' and
  `iedit'"
    :group '+doom-modeline)

  (defface doom-modeline-info
    `((t (:inherit success :bold t)))
    "Face for info-level messages in the modeline. Used by `*vc'."
    :group '+doom-modeline)

  (defface doom-modeline-warning
    `((t (:inherit warning :bold t)))
    "Face for warnings in the modeline. Used by `*flycheck'"
    :group '+doom-modeline)

  (defface doom-modeline-urgent
    `((t (:inherit error :bold t)))
    "Face for errors in the modeline. Used by `*flycheck'"
    :group '+doom-modeline)

  ;; Bar
  (defface doom-modeline-bar '((t (:inherit highlight)))
    "The face used for the left-most bar on the mode-line of an active window."
    :group '+doom-modeline)

  (defface doom-modeline-eldoc-bar '((t (:inherit shadow)))
    "The face used for the left-most bar on the mode-line when eldoc-eval is
  active."
    :group '+doom-modeline)

  (defface doom-modeline-inactive-bar '((t (:inherit warning :inverse-video t)))
    "The face used for the left-most bar on the mode-line of an inactive window."
    :group '+doom-modeline)


  ;;
  ;; Bootstrap
  ;;

  ;; Show version string for multi-version managers like rvm, rbenv, pyenv, etc.
  (defvar-local +doom-modeline-env-version nil)
  (defvar-local +doom-modeline-env-command nil)
  (add-hook 'focus-in-hook #'+doom-modeline|update-env)
  (add-hook 'find-file-hook #'+doom-modeline|update-env)
  (defun +doom-modeline|update-env ()
    (when +doom-modeline-env-command
      (let* ((default-directory (projectile-project-root))
             (s (shell-command-to-string +doom-modeline-env-command)))
        (setq +doom-modeline-env-version (if (string-match "[ \t\n\r]+\\'" s)
                                            (replace-match "" t t s)
                                          s)))))

  ;; Only support python and ruby for now
  (add-hook 'python-mode-hook (setq +doom-modeline-env-command "python --version 2>&1 | cut -d' ' -f2"))
  (add-hook 'ruby-mode-hook   (setq +doom-modeline-env-command "ruby   --version 2>&1 | cut -d' ' -f2"))


  ;;
  ;; Modeline helpers
  ;;

  (defsubst active ()
    (eq (selected-window) +doom-modeline-current-window))

  ;; Inspired from `powerline's `pl/make-xpm'.
  (def-memoized! +doom-modeline--make-xpm (color height width)
    "Create an XPM bitmap."
    (when (display-graphic-p)
      (propertize
       " " 'display
       (let ((data (make-list height (make-list width 1)))
             (i 0)
             (color (or color "None")))
         (create-image
          (concat
           (format "/* XPM */\nstatic char * percent[] = {\n\"%i %i 2 1\",\n\". c %s\",\n\"  c %s\","
                   (length (car data))
                   (length data)
                   color
                   color)
           (let ((len (length data))
                 (idx 0))
             (apply #'concat
                    (mapcar #'(lambda (dl)
                                (setq idx (+ idx 1))
                                (concat
                                 "\""
                                 (concat
                                  (mapcar #'(lambda (d)
                                              (if (eq d 0)
                                                  (string-to-char " ")
                                                (string-to-char ".")))
                                          dl))
                                 (if (eq idx len) "\"};" "\",\n")))
                            data))))
          'xpm t :ascent 'center)))))

  (defun +doom-modeline--buffer-file ()
    "Display the base of the current buffer's filename."
    (if buffer-file-name
        (file-name-nondirectory (or buffer-file-truename (file-truename buffer-file-name)))
      "%b"))

  (defun +doom-modeline--buffer-path ()
    "Displays the buffer's full path relative to the project root (includes the
  project root). Excludes the file basename. See `doom-buffer-name' for that."
    (when buffer-file-name
      (let ((buffer-path
             (file-relative-name (file-name-directory
                                  (or buffer-file-truename (file-truename buffer-file-name)))
                                 (projectile-project-root))))
        (unless (equal buffer-path "./")
          (let ((max-length (truncate (* (window-body-width) 0.4))))
            (if (> (length buffer-path) max-length)
                (let ((path (nreverse (split-string buffer-path "/" t)))
                      (output ""))
                  (when (and path (equal "" (car path)))
                    (setq path (cdr path)))
                  (while (and path (<= (length output) (- max-length 4)))
                    (setq output (concat (car path) "/" output)
                          path (cdr path)))
                  (when path
                    (setq output (concat "../" output)))
                  (unless (string-suffix-p "/" output)
                    (setq output (concat output "/")))
                  output)
              buffer-path))))))


  ;;
  ;; Segments
  ;;

  (def-modeline-segment! buffer-project
    "Displays `doom-project-root'. This is for special buffers like the scratch
  buffer where knowing the current project directory is important."
    (let ((face (if (active) 'doom-modeline-buffer-path)))
      (concat (all-the-icons-octicon
               "file-directory"
               :face face
               :v-adjust -0.05
               :height 1.25)
              (propertize (concat " " (abbreviate-file-name (projectile-project-root)))
                          'face face))))

  ;;
  (def-modeline-segment! buffer-info
    "Combined information about the current buffer, including the current working
  directory, the file name, and its state (modified, read-only or non-existent)."
    (let* ((all-the-icons-scale-factor 1.2)
           (modified-p (buffer-modified-p))
           (active (active))
           (faces (if modified-p 'doom-modeline-buffer-modified)))
      (concat (if buffer-read-only
                  (concat (all-the-icons-octicon
                           "lock"
                           :face 'doom-modeline-warning
                           :v-adjust -0.05)
                          " ")
                (when modified-p
                  (concat
                   (all-the-icons-faicon "floppy-o"
                                         :face 'doom-modeline-buffer-modified
                                         :v-adjust -0.1)
                   " ")))
              (when (and buffer-file-name (not (file-exists-p buffer-file-name)))
                (concat (all-the-icons-octicon
                         "circle-slash"
                         :face 'doom-modeline-urgent
                         :v-adjust -0.05)
                        " "))
              (when-let (dir-path (+doom-modeline--buffer-path))
                (if-let (faces (or faces (if active 'doom-modeline-buffer-path)))
                    (propertize dir-path 'face `(:inherit ,faces))
                  dir-path))
              (when-let (file-path (+doom-modeline--buffer-file))
                (if-let (faces (or faces (if active 'doom-modeline-buffer-file)))
                    (propertize file-path 'face `(:inherit ,faces))
                  file-path)))))

  ;;
  (def-modeline-segment! buffer-encoding
    "Displays the encoding and eol style of the buffer the same way Atom does."
    (concat (let ((eol-type (coding-system-eol-type buffer-file-coding-system)))
              (cond ((eq eol-type 0) "LF  ")
                    ((eq eol-type 1) "CRLF  ")
                    ((eq eol-type 2) "CR  ")))
            (let* ((sys (coding-system-plist buffer-file-coding-system))
                   (sys-name (plist-get sys :name))
                   (sys-cat (plist-get sys :category)))
              (cond ((memq sys-cat '(coding-category-undecided coding-category-utf-8))
                     "UTF-8")
                    (t (upcase (symbol-name sys-name)))))
            "  "))

  ;;
  (def-modeline-segment! major-mode
    "The major mode, including process, environment and text-scale info."
    (propertize
     (concat (format-mode-line mode-name)
             (if (stringp mode-line-process) mode-line-process)
             (if +doom-modeline-env-version (concat " " +doom-modeline-env-version))
             (and (featurep 'face-remap)
                  (/= text-scale-mode-amount 0)
                  (format " (%+d)" text-scale-mode-amount)))
     'face (if (active) 'doom-modeline-buffer-major-mode)))

  ;;
  (def-modeline-segment! vcs
    "Displays the current branch, colored based on its state."
    (when vc-mode
      (let ((backend (vc-backend buffer-file-name))
            (state   (vc-state buffer-file-name))
            (face    'mode-line-inactive)
            (active  (active))
            (all-the-icons-scale-factor 1.0)
            (all-the-icons-default-adjust -0.1))
        (concat +doom-modeline-vspc
                (cond ((memq state '(edited added))
                       (if active (setq face 'doom-modeline-info))
                       (all-the-icons-octicon
                        "git-branch"
                        :face face
                        :height 1.2
                        :v-adjust -0.05))
                      ((eq state 'needs-merge)
                       (if active (setq face 'doom-modeline-info))
                       (all-the-icons-octicon "git-merge" :face face))
                      ((eq state 'needs-update)
                       (if active (setq face 'doom-modeline-warning))
                       (all-the-icons-octicon "arrow-down" :face face))
                      ((memq state '(removed conflict unregistered))
                       (if active (setq face 'doom-modeline-urgent))
                       (all-the-icons-octicon "alert" :face face))
                      (t
                       (if active (setq face 'font-lock-doc-face))
                       (all-the-icons-octicon
                        "git-branch"
                        :face face
                        :height 1.2
                        :v-adjust -0.05)))
                " "
                (propertize (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))
                            'face (if active face))
                "  "
                +doom-modeline-vspc))))

  ;;
  (def-memoized! +doom-ml-icon (icon &optional text face)
    "Displays an octicon ICON with FACE, followed by TEXT. Uses
  `all-the-icons-octicon' to fetch the icon."
    (concat
     "  "
     (when icon
       (concat
        (all-the-icons-octicon icon :face face :height 1.0 :v-adjust 0)
        (if text " ")))
     (when text
       (propertize text 'face face))))

  (def-modeline-segment! flycheck
    "Displays color-coded flycheck error status in the current buffer with pretty
  icons."
    (when (boundp 'flycheck-last-status-change)
      (pcase flycheck-last-status-change
        ('finished (if flycheck-current-errors
                       (let-alist (flycheck-count-errors flycheck-current-errors)
                         (let ((sum (+ (or .error 0) (or .warning 0))))
                           (+doom-ml-icon "circle-slash"
                                          (number-to-string sum)
                                          (if .error 'doom-modeline-urgent 'doom-modeline-warning))))
                     (concat
                      (+doom-ml-icon "check" nil 'doom-modeline-info) " ")))
        ('running     (+doom-ml-icon "ellipsis" "Running" 'font-lock-doc-face))
        ('no-checker  (+doom-ml-icon "alert" "-" 'font-lock-doc-face))
        ('errored     (+doom-ml-icon "alert" "Error" 'doom-modeline-urgent))
        ('interrupted (+doom-ml-icon "x" "Interrupted" 'font-lock-doc-face))
        ;; ('suspicious  "")
        )))

  ;;
  (defsubst doom-column (pos)
    (save-excursion (goto-char pos)
                    (current-column)))

  (def-modeline-segment! selection-info
    "Information about the current selection, such as how many characters and
  lines are selected, or the NxM dimensions of a block selection."
    (when (and (active) (or mark-active (eq evil-state 'visual)))
      (let ((reg-beg (region-beginning))
            (reg-end (region-end)))
        (propertize
         (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max)))))
           (cond ((or (bound-and-true-p rectangle-mark-mode)
                      (eq 'block evil-visual-selection))
                  (let ((cols (abs (- (doom-column reg-end)
                                      (doom-column reg-beg)))))
                    (format "%dx%dB" lines cols)))
                 ((eq 'line evil-visual-selection)
                  (format "%dL" lines))
                 ((> lines 1)
                  (format "%dC %dL" (- (1+ reg-end) reg-beg) lines))
                 (t
                  (format "%dC" (- (1+ reg-end) reg-beg)))))
         'face 'doom-modeline-highlight))))


  ;;
  (defun +doom-modeline--macro-recording ()
    "Display current Emacs or evil macro being recorded."
    (when (and (active) (or defining-kbd-macro executing-kbd-macro))
      (let ((sep (propertize " " 'face 'doom-modeline-panel)))
        (concat sep
                (propertize (if (bound-and-true-p evil-this-macro)
                                (char-to-string evil-this-macro)
                              "Macro")
                            'face 'doom-modeline-panel)
                sep
                (all-the-icons-octicon "triangle-right"
                                       :face 'doom-modeline-panel
                                       :v-adjust -0.05)
                sep))))


  (defsubst +doom-modeline--iedit ()
    "Show the number of iedit regions matches + what match you're on."
    (when (and iedit-mode iedit-occurrences-overlays)
      (propertize
       (let ((this-oc (or (let ((inhibit-message t))
                            (iedit-find-current-occurrence-overlay))
                          (progn (iedit-prev-occurrence)
                                 (iedit-find-current-occurrence-overlay))))
             (length (length iedit-occurrences-overlays)))
         (format " %s/%d "
                 (if this-oc
                     (- length
                        (length (cdr
                                 (memq this-oc (sort (append iedit-occurrences-overlays (list))
                                                     (lambda (x y) (< (overlay-start x) (overlay-start y))))))))
                   "-")
                 length))
       'face (if (active) 'doom-modeline-panel))))

  (def-modeline-segment! matches
    "Displays: 1. the currently recording macro, 2. A current/total for the
  current search term (with anzu), 3. The number of substitutions being conducted
  with `evil-ex-substitute', and/or 4. The number of active `iedit' regions."
    (let ((meta (concat (+doom-modeline--macro-recording)
                        (+doom-modeline--iedit))))
       (or (and (not (string= meta "")) meta)
           (if buffer-file-name " %I "))))

  ;; TODO Include other information
  (def-modeline-segment! media-info
    "Metadata regarding the current file, such as dimensions for images."
    (cond ((eq major-mode 'image-mode)
           (let ((size (image-size (image-get-display-property) :pixels)))
             (format "  %dx%d  " (car size) (cdr size))))))

  ;;
  (def-modeline-segment! eldoc
    "Display eldoc documentation in the mode-line while using the minibuffer (e.g.
  `eval-expression')."
    (bound-and-true-p str))

  ;; These bars regulate the height of the mode-line in GUI Emacs.
  (def-modeline-segment! bar
    (+doom-modeline--make-xpm
     (face-background (if (active)
                          'doom-modeline-bar
                        'doom-modeline-inactive-bar)
                      nil t)
     +doom-modeline-height
     +doom-modeline-bar-width))

  (def-modeline-segment! eldoc-bar
    "A differently colored bar, to signify an eldoc display."
    (+doom-modeline--make-xpm
     (face-background 'doom-modeline-eldoc-bar nil t)
     +doom-modeline-height
     +doom-modeline-bar-width))


  ;;
  ;; Mode lines
  ;;

  (def-modeline! main
    (bar matches " " buffer-project buffer-info "  %l:%c %p  " selection-info)
    (buffer-encoding vcs major-mode flycheck))

  (def-modeline! eldoc
    (eldoc-bar " " eldoc)
    (media-info major-mode))

  (def-modeline! minimal
    (bar matches " " buffer-info)
    (media-info major-mode))

  (def-modeline! special
    (bar matches " %b   %l:%c %p  " selection-info)
    (buffer-encoding major-mode flycheck))

  (def-modeline! project
    (bar " " buffer-project)
    (major-mode))

  (def-modeline! media
    (bar " %b  ")
    (media-info major-mode))

  ;;
  (doom-set-modeline 'main t)

  ;; This scratch buffer is already created, and doesn't get a modeline. For the
  ;; love of Emacs, someone give the man a modeline!
  (with-current-buffer "*scratch*"
    (doom-set-modeline 'main))


  ;;
  ;; Hooks
  ;;

  (defun +doom-modeline|set-special-modeline ()
    (doom-set-modeline 'special))

  (defun +doom-modeline|set-media-modeline ()
    (doom-set-modeline 'media))

  (add-hook 'org-src-mode-hook #'+doom-modeline|set-special-modeline)
  (add-hook 'image-mode-hook #'+doom-modeline|set-media-modeline)
#+END_SRC
* Set default font and configure font resizing
I use Consolas

The standard =text-scale-= functions just resize the text in the
current buffer. These functions and bindings resize everything all
together.

#+BEGIN_SRC emacs-lisp
  (setq sk/default-font "Consolas")
  (setq sk/default-font-size 13)
  (setq sk/current-font-size sk/default-font-size)

  (setq sk/font-change-increment 1.1)

  (defun sk/set-font-size ()
    "Set the font to `sk/default-font' at `sk/current-font-size'."
    (set-frame-font
     (concat sk/default-font "-" (number-to-string sk/current-font-size))))

  (defun sk/reset-font-size ()
    "Change font size back to `sk/default-font-size'."
    (interactive)
    (setq sk/current-font-size sk/default-font-size)
    (sk/set-font-size))

  (defun sk/increase-font-size ()
    "Increase current font size by a factor of `sk/font-change-increment'."
    (interactive)
    (setq sk/current-font-size
          (ceiling (* sk/current-font-size sk/font-change-increment)))
    (sk/set-font-size))

  (defun sk/decrease-font-size ()
    "Decrease current font size by a factor of `sk/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq sk/current-font-size
          (max 1
               (floor (/ sk/current-font-size sk/font-change-increment))))
    (sk/set-font-size))

  (define-key global-map (kbd "C-)") 'sk/reset-font-size)
  (define-key global-map (kbd "C-+") 'sk/increase-font-size)
  (define-key global-map (kbd "C-=") 'sk/increase-font-size)
  (define-key global-map (kbd "C-_") 'sk/decrease-font-size)
  (define-key global-map (kbd "C--") 'sk/decrease-font-size)

  (sk/reset-font-size)
#+END_SRC
* =hydra=
Emacs bindings that stick around

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC
* Project management
** =projectile=
=projectile= is a project interaction library for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (message "projectile loaded"))
#+END_SRC
** =neotree=
An emacs tree plugin

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer t
    :init
    ;;Hydra bindings
    (defhydra hydra-neotree (:hint nil
                                     :pre  (neotree-dir (projectile-project-root))
                                     :post neotree-hide
                                     :color pink)
      ("r" neotree-rename-node "rename")
      ("w" neotree-copy-node "copy")
      ("n" neotree-create-node "new")
      ("d" neotree-delete-node "delete")
      ("i" neotree-previous-line)
      ("k" neotree-next-line)
      ("h" neotree-hidden-file-toggle "hidden-files")
      ("s" neotree-stretch-toggle "stretch")
      ("f" neotree-quick-look "quick-look")
      ("e" neotree-enter "select")
      ("q" nil "quit"))
    (global-set-key (kbd "C-c n") 'hydra-neotree/body)
    :config
    (use-package all-the-icons)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (require 'doom-neotree)
    (setq doom-neotree-file-icons 'non-nil)
    (message "neotree loaded"))
#+END_SRC
* Search and search completion

** =ivy=, =swiper= and =counsel=

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (message "ivy,swiper,counsel loaded")
    :bind (
           ("M-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-x l" . counsel-locate)
           ("C-c C-r" . ivy-resume)))
#+END_SRC
** =counsel-projectile=

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-on)
    (message counsel-projectile loaded)
    :bind (("C-c p SPC" . counsel-projectile)))
#+END_SRC
* Programming preferences
** General preferences

*** Delete trailing white spaces before saving a file

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Treat terms in camel case as seprate words globally

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** =highlight-symbol=
Automatic and manual symbol highlighting

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :bind(
          ("C-c h" . highlight-symbol))
    :config
    (message "highlight-symbol loaded"))

#+END_SRC
*** =smartparens=
Minor mode for Emacs that deals with parens pairs and tries to be smart about it

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :defer t
    :config
    (require 'smartparens-config)
    (message "loaded smartparens"))
#+END_SRC
*** =dumb-jump=
A 'jump to definition' package

#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :ensure t
      :defer t
      :bind (("C-c j" . dumb-jump-go))
      :config
      (dumb-jump-mode)
      (message "dumb-jump loaded"))
#+END_SRC
** Syntax checking
=flycheck= provides on-the-fly syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :config
    (global-flycheck-mode)
    (message "flycheck loaded"))
#+END_SRC
** Python
*** =elpy=
Emacs Python Development Environment

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (add-hook 'python-mode-hook 'elpy-mode)
    :config
    (elpy-enable)
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (setq elpy-company-post-completion-function 'elpy-company-post-complete-parens)
    (use-package py-autopep8
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
      (message "py-autopep8 loaded"))
      (message "elpy loaded"))
#+END_SRC
*** Indent 2 spaces

#+BEGIN_SRC emacs-lisp
  (setq python-indent 2)
#+END_SRC
*** =python-django=
Django project management package

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/python-django.el")
  (require 'python-django)
#+END_SRC
** Emacs Lisp
*** =paredit=
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :load-path "~/.emacs.d/resources/paredit"
    :config
    (message "paredit loaded"))
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC
* Version Control
=magit= is a git porcelain for emacs

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    ;;open magit-status in a fullframe buffer
    (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
    (setq magit-completing-read-function 'ivy-completing-read)
    (message "magit loaded")
    :bind (
           ("C-x g" . magit-status)))
#+END_SRC
* Task management
=org-mode= preferences

** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
#+END_SRC
** =org-mode= key bindings

#+BEGIN_SRC emacs-lisp
  (bind-key "C-M-w" 'append-next-kill org-mode-map)
  (bind-key "C-c t" 'org-show-todo-tree org-mode-map)
  (bind-key "C-c r" 'org-refile org-mode-map)
#+END_SRC
** Display preferences

Show bulleted list instead of just asterisks

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :load-path "~/.emacs.d/resources/org-bullets"
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (message "org-bullets loaded"))
#+END_SRC

Org-mode levels color customization
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'doom-one
   '(org-level-1 ((t (:background "#23272e" :foreground "#da8548" :weight normal))))
   '(org-level-2 ((t (:foreground "#98be65"))))
   '(org-level-3 ((t (:foreground "#a9a1e1"))))
   '(org-level-4 ((t (:foreground "#ECBE7B"))))
   '(org-level-5 ((t (:foreground "#4db5bd"))))
   '(org-link ((t (:foreground "DarkOrchid1" :underline t)))))
#+END_SRC

Theme specific settings

#+BEGIN_SRC emacs-lisp
(setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC
** Source code editing

Use syntax highlighting in source blocks while editing

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "↴")
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable smartparens

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'smartparens-mode)
#+END_SRC
** =org-drill=

#+BEGIN_SRC emacs-lisp
  (use-package org-drill
    :config
    (add-to-list 'load-path "~/.emacs.d/resources/org-learn.el")
    (add-to-list 'load-path "~/.emacs.d/resources/org-drill.el")
    (require 'org-drill)
    (setq org-drill-spaced-repetition-algorithm 'sm2)
    (message "org-drill loaded"))
#+END_SRC
** =org-capture=

#+BEGIN_SRC emacs-lisp
  (defvar gtd-collection-bucket "~/Dropbox/Org/organizer/collection_bucket.org")
  (setq org-default-notes-file "~/Dropbox/Org/notes.org")
  (setq org-capture-templates
   '(("c" "Templates for collecting thoughts and ideas")
     ("ca" "Articles/Links" entry (file+headline gtd-collection-bucket "Articles/Links")
        "* [[%^{Link}][%^{Description}]]\n %T" :immediate-finish t)
     ("cb" "Books" entry (file+headline gtd-collection-bucket "Books")
      "* Read %^{Book}, by %^{Author}\n %T" :immediate-finish t)
     ("cc" "College" entry (file+headline gtd-collection-bucket "College")
      "* %?\n %T")
     ("cd" "Dreams" entry (file+headline gtd-collection-bucket "Dreams")
      "* %?\n %T")
     ("cf" "Food and restaurants" entry (file+headline gtd-collection-bucket "Food/Restaurants")
      "* %?\n %T")
     ("cg" "Goals" entry (file+headline gtd-collection-bucket "Goals")
      "* %?\n %T")
     ("ch" "Habits" entry (file+headline gtd-collection-bucket "Habits")
      "* %?\n %T")
     ("ci" "Ideas" entry (file+headline gtd-collection-bucket "Ideas")
      "* %?\n %T")
     ("cl" "Learn" entry (file+headline gtd-collection-bucket "Learn")
      "* %^{Learn}\n %T" :immediate-finish t)
     ("cm" "Movies" entry (file+headline gtd-collection-bucket "Movies")
      "* Watch %^{Watch}\n %T" :immediate-finish t)
     ("co" "Others" entry (file+headline gtd-collection-bucket "Others")
      "* %?\n %T")
     ("cp" "Purchase" entry (file+headline gtd-collection-bucket "Purchase")
      "* Buy %^{Buy}\n %T" :immediate-finish t)
     ("ct" "TV series/Anime" entry (file+headline gtd-collection-bucket "TV series/Anime")
      "* Watch %^{Watch}\n %T" :immediate-finish t)
     ("cv" "Videos" entry (file+headline gtd-collection-bucket "Videos")
        "* [[%^{Link}][%^{Description}]]\n   - Captured on %T" :immediate-finish t)
     ("cw" "Work" entry (file+headline gtd-collection-bucket "Work")
      "* %?\n %T")
     ("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
      "* TODO %?\n  %i\n  %a")
     ("v" "Vocabulary" entry (file+headline "~/Dropbox/Org/GRE/vocabulary.org" "Vocabulary")
      "* Word :drill:\n %^{word}\n** Meaning \n%^{meaning}")))
#+END_SRC
** =org-journal=

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :config
    (setq org-journal-dir "~/Dropbox/Org/journal/")
    (setq org-journal-date-format "%A, %d-%B-%Y"))
#+END_SRC
** Tasks and states

*** Todo Keywords and keyword faces

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
#+END_SRC
*** Fast todo selection

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
#+END_SRC
*** Skipping processing

This setting allows changing todo states with S-left and S-right skipping all of the normal processing when entering or leaving a todo state. This cycles through the todo states but skips setting timestamps and entering notes.

#+BEGIN_SRC emacs-lisp
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC
*** Todo state triggers

Used to automatically assign tags to tasks based on state changes.
Following are the rules:
 - Moving a task to =CANCELLED= adds a =CANCELLED= tag
 - Moving a task to =WAITING= adds a =WAITING= tag
 - Moving a task to =HOLD= adds =WAITING= and =HOLD= tags
 - Moving a task to =DONE= state removes =WAITING= and =HOLD= tags
 - Moving a task to =TODO= removes =WAITING=, =CANCELLED=, and =HOLD= tags
 - Moving a task to =NEXT= removes =WAITING=, =CANCELLED=, and =HOLD= tags
 - Moving a task to =DONE= removes =WAITING=, =CANCELLED=, and =HOLD= tags

#+BEGIN_SRC emacs-lisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
** =org-agenda=

*** Files to scan for agenda views

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/Org/organizer/collection_bucket.org"
                           "~/Dropbox/Org/organizer/next_actions.org"
                           "~/Dropbox/Org/organizer/projects.org"
                           "~/Dropbox/Org/organizer/someday_maybe.org"
                           "~/Dropbox/Org/organizer/waiting.org"))
#+END_SRC
** =org-refile=

Include current file and any file contributing to the agenda upto 9 levels deep in
=org-refile= targets

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
#+END_SRC

Allow refile to create parent tasks with confirmation

#+BEGIN_SRC emacs-lisp
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

Logging

#+BEGIN_SRC emacs-lisp
  (setq org-log-refile t)
#+END_SRC
* Utility functions
** Insert current date and time

#+BEGIN_SRC emacs-lisp
  (defvar current-date-time-format "%d-%b-%Y %k:%M"
    "Format of date to insert with `insert-current-date-time' func See help of `format-time-string' for possible replacements")

  (defvar current-time-format "%k:%M:%S"
    "Format of date to insert with `insert-current-time' func.Note the weekly scope of the command's precision.")

  (defun insert-current-date-time ()
    "insert the current date and time into current buffer.Uses `current-date-time-format' for the formatting the date/time."
         (interactive)
         (insert (format-time-string current-date-time-format (current-time)))
         )

  (defun insert-current-time ()
    "insert the current time (1-week scope) into the current buffer."
         (interactive)
         (insert (format-time-string current-time-format (current-time)))
         )

  (global-set-key (kbd "C-x C-d") 'insert-current-date-time)
  (global-set-key (kbd "C-x C-t") 'insert-current-time)
#+END_SRC
** Splitting windows

#+BEGIN_SRC emacs-lisp
  (defun split-window-right-and-move-cursor ()
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun split-window-below-and-move-cursor ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (substitute-key-definition 'split-window-right 'split-window-right-and-move-cursor global-map)
  (substitute-key-definition 'split-window-below 'split-window-below-and-move-cursor global-map)
#+END_SRC
* Editing settings
** Enable visual line mode

#+BEGIN_SRC emacs-lisp
  (visual-line-mode t)
#+END_SRC
** Always kill current buffer

#+BEGIN_SRC emacs-lisp
 (substitute-key-definition 'kill-buffer 'kill-buffer-and-its-windows global-map)
#+END_SRC
** =company-mode= settings
*** Use =company-mode= globally

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
*** Set idle-delay

#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0)
#+END_SRC
*** Set minimum prefix length

#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 3)
#+END_SRC
*** Show numbers

#+BEGIN_SRC emacs-lisp
  (setq company-show-numbers t)
#+END_SRC
** Always indent with spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** =multiple cursors=
Multiple cursors like Sublime Text

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :config
    (message "multiple-cursors loaded")
    :bind (
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC
** line editing
*** Copying curent line

#+BEGIN_SRC emacs-lisp
  (defun quick-copy-line ()
        "Copy the whole line that point is on and move to the beginning of the next line.
      Consecutive calls to this command append each line to the
      kill-ring."
        (interactive)
        (let ((beg (line-beginning-position 1))
              (end (line-beginning-position 2)))
          (if (eq last-command 'quick-copy-line)
              (kill-append (buffer-substring beg end) (< end beg))
            (kill-new (buffer-substring beg end))))
        (beginning-of-line 2))
  (global-set-key (kbd "C-S-C") 'quick-copy-line)
#+END_SRC
*** Cutting current line

#+BEGIN_SRC emacs-lisp
  (defun quick-cut-line ()
    "Cut the whole line that point is on.  Consecutive calls to this command append each line to the kill-ring."
    (interactive)
    (let ((beg (line-beginning-position 1))
          (end (line-beginning-position 2)))
      (if (eq last-command 'quick-cut-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-new (buffer-substring beg end)))
      (delete-region beg end))
    (beginning-of-line 1)
    (setq this-command 'quick-cut-line))
  (global-set-key (kbd "C-S-D") 'quick-cut-line)
#+END_SRC
*** Moving lines

#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move the line up and place the point at the beginning of the line"
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    "Move the line down and place the point at the beginning of the line"
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))

  (global-set-key (kbd "C-S-K") 'move-line-down)
  (global-set-key (kbd "C-S-I") 'move-line-up)
#+END_SRC
** Smooth scrolling

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/smooth-scrolling.el")
  (require 'smooth-scrolling)
  (setq linum-delay t)
  (setq auto-window-vscroll nil)
  (setq scroll-conservatively 10000)
  (setq auto-save-interval 500)
  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** Easy navigation

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-navigation (:hint nil
                                  :color pink)
  ("l" forward-char)
  ("j" backward-char)
  ("k" next-line)
  ("i" previous-line)
  ("w" scroll-down-command)
  ("s" scroll-up-command)
  ("a" backward-word)
  ("d" forward-word)
  ("q" nil "quit"))
  (global-set-key (kbd "C-n") 'hydra-navigation/body)
#+END_SRC
* Set =custom-file= location

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC
* Custom key bindings

#+BEGIN_SRC emacs-lisp
   ;; custom key bindings
  (global-set-key (kbd "C-x C-q") 'save-buffers-kill-terminal) ;; was C-x C-c, overrides read-only-mode
  (global-set-key (kbd "C-;") 'set-mark-command) ;; was C-Space

  ;; easy navigation
  (global-set-key (kbd "C-i") 'previous-line) ;;
  (global-set-key (kbd "C-j") 'backward-char) ;;
  (global-set-key (kbd "C-k") 'next-line) ;;
  (global-set-key (kbd "C-l") 'forward-char) ;;

  (global-set-key (kbd "M-k") 'scroll-up-command)
  (global-set-key (kbd "M-i") 'scroll-down-command)
  (global-set-key (kbd "M-j") 'backward-word) ;;
  (global-set-key (kbd "M-l") 'forward-word) ;;

  (global-set-key (kbd "C-s") 'save-buffer) ;;
  (global-set-key (kbd "C-r") (lambda () (interactive) (recenter-top-bottom 0)))

#+END_SRC
