#+TITLE: Emacs configuration

* Set personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Suraj Kumar Reddy"
        user-mail-address "suraj@gmail.com"
        calendar-latitude 17.3
        calendar-longitude -78.4
        calendar-location-name "Hyderabad, IND")
#+END_SRC
* load =misc-cmds.el=
A set of useful functions. Source: [[https://github.com/emacsmirror/emacswiki.org/blob/master/misc-cmds.el][misc-cmds.el]]

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/misc-cmds.el")
#+END_SRC
* Package management
#+BEGIN_SRC emacs-lisp
    (let ((default-directory "~/.emacs.d"))
      (normal-top-level-add-subdirs-to-load-path))
      (require 'package)

    (defvar my-packages
      '(
        use-package
        diminish
        bind-key
        ))

    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/") t)

    (add-to-list 'package-archives
                 '("org" . "http://orgmode.org/elpa/") t)

    (when (not package-archive-contents)
      (package-refresh-contents))
    (package-initialize)

    (dolist (p my-packages)
      (when (not (package-installed-p p))
        (package-install p)))

  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)
#+END_SRC
* Use sensible defaults
  Use [[https://github.com/surajkumar6/emacs-config/blob/master/resources/sensible-defaults.el][sensible-defaults.el]] for some basic settings

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC
* Enable better defaults

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :config
    (message "better-defaults loaded"))
#+END_SRC
* Shell

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/multi-term.el")
  (require 'multi-term)
  (setq multi-term-program "/bin/zsh")
#+END_SRC
* UI Preferences
** Disable toolbars and menus

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC
** Use =global-prettify-symbols-mode=

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable =global-hl-line-mode= to highlight current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Enable line numbers globally

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
#+END_SRC
** =rainbow-delimeters=
Rainbow delimeters show matching braces with same color

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :config
    (message "rainbow-delimeters loaded"))
#+END_SRC
** =all-the-icon=
   A collection of icons and fonts(mainly used for neotree)

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :defer t
    :config
    (message "all-the-icons loaded"))
#+END_SRC
** =page-break-lines=
Displays ugly form feed characters as tidy horizontal rules

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (message "page-break-lines loaded"))
#+END_SRC
** =dashboard=
A startup dashboard with widgets

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; Set the title
    (setq dashboard-banner-logo-title "Welcome Suraj")
    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Set the number of items in each widget
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)))
    (message "dashboard loaded"))
#+END_SRC
** =doom-themes=
A Doon inspired theme for emacs

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-enable-bold nil) ;; Disable bolding universally
    (setq doom-enable-italic nil) ;; Disable italics universally
    (setq doom-one-brighter-modeline t) ;; Enable brighter mode line
    (setq doom-one-brighter-comments t) ;; Enable brighter comments
    (load-theme 'doom-one t)
    (message "doom-theme loaded"))
#+END_SRC
* Set default font and configure font resizing
I use Consolas

The standard =text-scale-= functions just resize the text in the
current buffer. These functions and bindings resize everything all
together.

#+BEGIN_SRC emacs-lisp
  (setq sk/default-font "Consolas")
  (setq sk/default-font-size 13)
  (setq sk/current-font-size sk/default-font-size)

  (setq sk/font-change-increment 1.1)

  (defun sk/set-font-size ()
    "Set the font to `sk/default-font' at `sk/current-font-size'."
    (set-frame-font
     (concat sk/default-font "-" (number-to-string sk/current-font-size))))

  (defun sk/reset-font-size ()
    "Change font size back to `sk/default-font-size'."
    (interactive)
    (setq sk/current-font-size sk/default-font-size)
    (sk/set-font-size))

  (defun sk/increase-font-size ()
    "Increase current font size by a factor of `sk/font-change-increment'."
    (interactive)
    (setq sk/current-font-size
          (ceiling (* sk/current-font-size sk/font-change-increment)))
    (sk/set-font-size))

  (defun sk/decrease-font-size ()
    "Decrease current font size by a factor of `sk/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq sk/current-font-size
          (max 1
               (floor (/ sk/current-font-size sk/font-change-increment))))
    (sk/set-font-size))

  (define-key global-map (kbd "C-)") 'sk/reset-font-size)
  (define-key global-map (kbd "C-+") 'sk/increase-font-size)
  (define-key global-map (kbd "C-=") 'sk/increase-font-size)
  (define-key global-map (kbd "C-_") 'sk/decrease-font-size)
  (define-key global-map (kbd "C--") 'sk/decrease-font-size)

  (sk/reset-font-size)
#+END_SRC
* Project management
** =projectile=
=projectile= is a project interaction library for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (message "projectile loaded"))
#+END_SRC
** =neotree=
An emacs tree plugin

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer t
    :init
    (defun open-neotree-after-opening-projectile-project()
      (neotree-dir (projectile-project-root))
      (other-window 1))
    (add-hook 'projectile-after-switch-project-hook 'open-neotree-after-opening-projectile-project)
    (add-hook 'projectile-before-switch-project-hook 'neotree-hide)
    :config
    (use-package all-the-icons)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (require 'doom-neotree)
    (setq doom-neotree-file-icons 'non-nil)
    (message "neotree loaded")
    :bind (
           ("C-c n" . neotree-toggle)
           ([f7] . neotree-dir)
           :map neotree-mode-map
           ("C-d" . neotree-delete-node)
           ("C-r" . neotree-rename-node)
           ("C-w" . neotree-copy-node)
           ("C-n" . neotree-create-node)
           ("C-d" . neotree-delete-node)
           ("C-i" . neotree-previous-line)
           ("C-k" . neotree-next-line)))
#+END_SRC
* Search and search completion(helm, helm-projectile, swoop)

** =ivy=, =swiper= and =counsel=

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (message "ivy,swiper,counsel loaded")
    :bind (
           ("M-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-x l" . counsel-locate)
           ("C-c C-r" . ivy-resume)))
#+END_SRC
** =counsel-projectile=

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-on)
    (message counsel-projectile loaded)
    :bind (("C-c p SPC" . counsel-projectile)))
#+END_SRC
* Programming preferences
** General preferences

*** Delete trailing white spaces before saving a file

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Treat terms in camel case as seprate words globally

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** =highlight-symbol=
Automatic and manual symbol highlighting

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :bind(
          ("C-c h" . highlight-symbol))
    :config
    (message "highlight-symbol loaded"))

#+END_SRC
*** =smartparens=
Minor mode for Emacs that deals with parens pairs and tries to be smart about it

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :defer t
    :config
    (require 'smartparens-config)
    (message "loaded smartparens"))
#+END_SRC
*** =dumb-jump=
A 'jump to definition' package

#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :ensure t
      :defer t
      :bind (("C-c j" . dumb-jump-go))
      :config
      (dumb-jump-mode)
      (message "dumb-jump loaded"))
#+END_SRC
** Syntax checking
=flycheck= provides on-the-fly syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :config
    (global-flycheck-mode)
    (message "flycheck loaded"))
#+END_SRC
** Python
*** =elpy=
Emacs Python Development Environment

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (add-hook 'python-mode-hook 'elpy-mode)
    :config
    (elpy-enable)
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (setq elpy-company-post-completion-function 'elpy-company-post-complete-parens)
    (use-package py-autopep8
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
      (message "py-autopep8 loaded"))
      (message "elpy loaded"))
#+END_SRC
*** Indent 2 spaces

#+BEGIN_SRC emacs-lisp
  (setq python-indent 2)
#+END_SRC
*** =python-django=
Django project management package

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/python-django.el")
  (require 'python-django)
#+END_SRC
** Emacs Lisp
*** =paredit=
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :load-path "~/.emacs.d/resources/paredit"
    :config
    (message "paredit loaded"))
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC
* Version Control
=magit= is a git porcelain for emacs

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    ;;open magit-status in a fullframe buffer
    (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
    (setq magit-completing-read-function 'ivy-completing-read)
    (message "magit loaded")
    :bind (
           ("C-x g" . magit-status)))
#+END_SRC
* Task management
=org-mode= preferences

** load =org-mode= package

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    (org-reload)
    (message "org-mode loaded"))
#+END_SRC
** Activation

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
#+END_SRC
** Display preferences

Show bulleted list instead of just asterisks

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :load-path "~/.emacs.d/resources/org-bullets"
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (message "org-bullets loaded"))
#+END_SRC

Org-mode levels color customization
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'doom-one
   '(org-level-1 ((t (:background "#23272e" :foreground "#da8548" :weight normal))))
   '(org-level-2 ((t (:foreground "#98be65"))))
   '(org-level-3 ((t (:foreground "#a9a1e1"))))
   '(org-level-4 ((t (:foreground "#ECBE7B"))))
   '(org-level-5 ((t (:foreground "#4db5bd"))))
   '(org-link ((t (:foreground "DarkOrchid1" :underline t)))))
#+END_SRC

Theme specific settings

#+BEGIN_SRC emacs-lisp
(setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC
** Source code editing

Use syntax highlighting in source blocks while editing

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "↴")
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable smartparens

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'smartparens-mode)
#+END_SRC
** =org-drill=

#+BEGIN_SRC emacs-lisp
  (use-package org-drill
    :config
    (add-to-list 'org-modules 'org-drill)
    (message "org-drill loaded"))
#+END_SRC
* Utility functions
** Insert current date and time

#+BEGIN_SRC emacs-lisp
  (defvar current-date-time-format "%d-%b-%Y %k:%M"
    "Format of date to insert with `insert-current-date-time' func See help of `format-time-string' for possible replacements")

  (defvar current-time-format "%k:%M:%S"
    "Format of date to insert with `insert-current-time' func.Note the weekly scope of the command's precision.")

  (defun insert-current-date-time ()
    "insert the current date and time into current buffer.Uses `current-date-time-format' for the formatting the date/time."
         (interactive)
         (insert (format-time-string current-date-time-format (current-time)))
         )

  (defun insert-current-time ()
    "insert the current time (1-week scope) into the current buffer."
         (interactive)
         (insert (format-time-string current-time-format (current-time)))
         )

  (global-set-key (kbd "C-x C-d") 'insert-current-date-time)
  (global-set-key (kbd "C-x C-t") 'insert-current-time)
#+END_SRC
* Editing settings
** Always kill current buffer

#+BEGIN_SRC emacs-lisp
 (substitute-key-definition 'kill-buffer 'kill-buffer-and-its-windows global-map)
#+END_SRC
** =company-mode= settings
*** Use =company-mode= globally

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
*** Set idle-delay

#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0)
#+END_SRC
*** Set minimum prefix length

#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 3)
#+END_SRC
*** Show numbers

#+BEGIN_SRC emacs-lisp
  (setq company-show-numbers t)
#+END_SRC
** Always indent with spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** =multiple cursors=
Multiple cursors like Sublime Text

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :config
    (message "multiple-cursors loaded")
    :bind (
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC
** line editing
*** Copying curent line

#+BEGIN_SRC emacs-lisp
  (defun quick-copy-line ()
        "Copy the whole line that point is on and move to the beginning of the next line.
      Consecutive calls to this command append each line to the
      kill-ring."
        (interactive)
        (let ((beg (line-beginning-position 1))
              (end (line-beginning-position 2)))
          (if (eq last-command 'quick-copy-line)
              (kill-append (buffer-substring beg end) (< end beg))
            (kill-new (buffer-substring beg end))))
        (beginning-of-line 2))
#+END_SRC
*** Cutting current line

#+BEGIN_SRC emacs-lisp
  (defun quick-cut-line ()
    "Cut the whole line that point is on.  Consecutive calls to this command append each line to the kill-ring."
    (interactive)
    (let ((beg (line-beginning-position 1))
          (end (line-beginning-position 2)))
      (if (eq last-command 'quick-cut-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-new (buffer-substring beg end)))
      (delete-region beg end))
    (beginning-of-line 1)
    (setq this-command 'quick-cut-line))
#+END_SRC
*** Moving lines

#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move the line up and place the point at the beginning of the line"
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    "Move the line down and place the point at the beginning of the line"
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))
#+END_SRC
* Set =custom-file= location

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC
* Custom key bindings

#+BEGIN_SRC emacs-lisp
   ;; custom key bindings
  (global-set-key (kbd "C-x C-q") 'save-buffers-kill-terminal) ;; was C-x C-c, overrides read-only-mode
  (global-set-key (kbd "C-;") 'set-mark-command) ;; was C-Space

  ;; easy navigation
  (global-set-key (kbd "C-i") 'previous-line) ;;
  (global-set-key (kbd "C-j") 'backward-char) ;;
  (global-set-key (kbd "C-k") 'next-line) ;;
  (global-set-key (kbd "C-l") 'forward-char) ;;

  (global-set-key (kbd "M-k") 'scroll-up-command)
  (global-set-key (kbd "M-i") 'scroll-down-command)
  (global-set-key (kbd "M-j") 'backward-word) ;;
  (global-set-key (kbd "M-l") 'forward-word) ;;

  (global-set-key (kbd "C-s") 'save-buffer) ;;
#+END_SRC
