#+TITLE: Emacs configuration

* Toggle full screen mode

#+BEGIN_SRC emacs-lisp
  (toggle-frame-fullscreen)
#+END_SRC

* Set personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Suraj Kumar Reddy"
        user-mail-address "suraj@gmail.com"
        calendar-latitude 17.3
        calendar-longitude -78.4
        calendar-location-name "Hyderabad, IND")
#+END_SRC

* load =misc-cmds.el=
A set of useful functions. Source: [[https://github.com/emacsmirror/emacswiki.org/blob/master/misc-cmds.el][misc-cmds.el]]

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/misc-cmds.el")
#+END_SRC

* Package management

#+BEGIN_SRC emacs-lisp
    (let ((default-directory "~/.emacs.d"))
      (normal-top-level-add-subdirs-to-load-path))
      (require 'package)

    (defvar my-packages
      '(
        use-package
        diminish
        bind-key
        ))

    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/") t)

    (add-to-list 'package-archives
                 '("org" . "http://orgmode.org/elpa/") t)

    (when (not package-archive-contents)
      (package-refresh-contents))
    (package-initialize)

    (dolist (p my-packages)
      (when (not (package-installed-p p))
        (package-install p)))

  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* Workspaces

#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :ensure t
    :config
    (defface +workspace-tab-selected-face
      '((((class color) (background light))
         (:background "#333333" :foreground "#000000")) ;; FIXME
        (((class color) (background dark))
         (:background "#51afef" :foreground "#181e26")))
      "The face for selected tabs displayed by `+workspace/display'"
      :group 'doom)

    (defface +workspace-tab-face
      '((((class color) (background light))
         (:background "#333333" :foreground "#000000")) ;; FIXME
        (((type graphic) (class color) (background dark))
         (:background "#23272e" :foreground "#5B6268"))
        (((class color) (background dark))
         (:background "#262626" :foreground "#525252")))
      "The face for selected tabs displayed by `+workspace/display'"
      :group 'doom)

    (defun +workspace-list ()
      "Retrieve a list of names of open workspaces (strings)."
      (delete persp-nil-name (persp-names-current-frame-fast-ordered)))

    (defun +workspace-current-name ()
      "Get the name of the currently active workspace."
      (safe-persp-name (get-current-persp)))

    (defun +workspace--tabline (&optional names)
      (let ((names (or names (+workspace-list)))
            (current-name (+workspace-current-name))
            (i 0))
        (mapconcat
         #'identity
         (mapcar (lambda (it)
                   (cl-incf i)
                   (propertize (format " [%d] %s " i it)
                               'face (if (equal current-name it)
                                         '+workspace-tab-selected-face
                                       '+workspace-tab-face)))
                 names)
         " ")))

    (defun +workspace--message-body (message &optional  type)
      (concat (+workspace--tabline)
              (propertize " | " 'face 'font-lock-comment-face)
              (propertize (format "%s" message)
                          'face (pcase type
                                  ('error 'error)
                                  ('warn 'warning)
                                  ('success 'success)
                                  ('info 'font-lock-comment-face)))))
    (defun +workspace/display ()
    "Display a list of workspaces (like tabs) in the echo area."
      (interactive)
      (message "%s" (+workspace--tabline)))
    (with-eval-after-load "persp-mode-autoloads"
        (setq wg-morph-on nil) ;; switch off animation
        (setq persp-autokill-buffer-on-remove 'kill-weak)
        (add-hook 'after-init-hook #'(lambda () (persp-mode 1)))))
#+END_SRC

* Use sensible defaults
  Use [[https://github.com/surajkumar6/emacs-config/blob/master/resources/sensible-defaults.el][sensible-defaults.el]] for some basic settings

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Enable better defaults

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :config
    (message "better-defaults loaded"))
#+END_SRC

* Shell

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/multi-term.el")
  (require 'multi-term)
  (setq multi-term-program "/bin/zsh")
#+END_SRC

* UI Preferences
** Disable toolbars and menus

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Use =global-prettify-symbols-mode=

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Enable =global-hl-line-mode= to highlight current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

** Enable line numbers globally

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
#+END_SRC

** =rainbow-delimeters=
Rainbow delimeters show matching braces with same color

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :config
    (message "rainbow-delimeters loaded"))
#+END_SRC

** =all-the-icon=
   A collection of icons and fonts(mainly used for neotree)

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :defer t
    :config
    (message "all-the-icons loaded"))
#+END_SRC

** =page-break-lines=
Displays ugly form feed characters as tidy horizontal rules

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (message "page-break-lines loaded"))
#+END_SRC

** =dashboard=
A startup dashboard with widgets

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; Set the title
    (setq dashboard-banner-logo-title "Welcome Suraj")
    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Set the number of items in each widget
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)))
    (message "dashboard loaded"))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :ensure t
    :init
    (setq leuven-scale-outline-headlines nil)
    (setq leuven-scale-org-agenda-structure nil))
#+END_SRC

* Set default font and configure font resizing
I use Consolas

The standard =text-scale-= functions just resize the text in the
current buffer. These functions and bindings resize everything all
together.

#+BEGIN_SRC emacs-lisp
  (setq sk/default-font "Consolas")
  (setq sk/default-font-size 13)
  (setq sk/current-font-size sk/default-font-size)

  (setq sk/font-change-increment 1.1)

  (defun sk/set-font-size ()
    "Set the font to `sk/default-font' at `sk/current-font-size'."
    (set-frame-font
     (concat sk/default-font "-" (number-to-string sk/current-font-size))))

  (defun sk/reset-font-size ()
    "Change font size back to `sk/default-font-size'."
    (interactive)
    (setq sk/current-font-size sk/default-font-size)
    (sk/set-font-size))

  (defun sk/increase-font-size ()
    "Increase current font size by a factor of `sk/font-change-increment'."
    (interactive)
    (setq sk/current-font-size
          (ceiling (* sk/current-font-size sk/font-change-increment)))
    (sk/set-font-size))

  (defun sk/decrease-font-size ()
    "Decrease current font size by a factor of `sk/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq sk/current-font-size
          (max 1
               (floor (/ sk/current-font-size sk/font-change-increment))))
    (sk/set-font-size))

  (define-key global-map (kbd "C-)") 'sk/reset-font-size)
  (define-key global-map (kbd "C-+") 'sk/increase-font-size)
  (define-key global-map (kbd "C-=") 'sk/increase-font-size)
  (define-key global-map (kbd "C-_") 'sk/decrease-font-size)
  (define-key global-map (kbd "C--") 'sk/decrease-font-size)

  (sk/reset-font-size)
#+END_SRC

* =hydra=
Emacs bindings that stick around

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

* Project management
** =projectile=
=projectile= is a project interaction library for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (message "projectile loaded"))
#+END_SRC
** =neotree=
An emacs tree plugin

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer t
    :init
    ;;Hydra bindings
    (defhydra hydra-neotree (:hint nil
                                     :pre  (neotree-dir (projectile-project-root))
                                     :post neotree-hide
                                     :color pink)
      ("r" neotree-rename-node "rename")
      ("w" neotree-copy-node "copy")
      ("n" neotree-create-node "new")
      ("d" neotree-delete-node "delete")
      ("i" neotree-previous-line)
      ("k" neotree-next-line)
      ("h" neotree-hidden-file-toggle "hidden-files")
      ("s" neotree-stretch-toggle "stretch")
      ("f" neotree-quick-look "quick-look")
      ("e" neotree-enter "select")
      ("q" nil "quit"))
    (global-set-key (kbd "C-c n") 'hydra-neotree/body)
    :config
    (use-package all-the-icons)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (message "neotree loaded"))
#+END_SRC

* Search and search completion

** =ivy=, =swiper= and =counsel=

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (message "ivy,swiper,counsel loaded")
    :bind (
           ("M-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-x l" . counsel-locate)
           ("C-c C-r" . ivy-resume)))
#+END_SRC
** =counsel-projectile=

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-on)
    (message counsel-projectile loaded)
    :bind (("C-c p SPC" . counsel-projectile)))
#+END_SRC

* Programming preferences
** General preferences

*** Delete trailing white spaces before saving a file

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Treat terms in camel case as seprate words globally

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** =highlight-symbol=
Automatic and manual symbol highlighting

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :bind(
          ("C-c h" . highlight-symbol))
    :config
    (message "highlight-symbol loaded"))

#+END_SRC
*** =smartparens=
Minor mode for Emacs that deals with parens pairs and tries to be smart about it

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :defer t
    :config
    (require 'smartparens-config)
    (message "loaded smartparens"))
#+END_SRC
*** =dumb-jump=
A 'jump to definition' package

#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :ensure t
      :defer t
      :bind (("C-c j" . dumb-jump-go))
      :config
      (dumb-jump-mode)
      (message "dumb-jump loaded"))
#+END_SRC
** Syntax checking
=flycheck= provides on-the-fly syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :config
    (global-flycheck-mode)
    (message "flycheck loaded"))
#+END_SRC
** Python
*** =elpy=
Emacs Python Development Environment

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (add-hook 'python-mode-hook 'elpy-mode)
    :config
    (elpy-enable)
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (setq elpy-company-post-completion-function 'elpy-company-post-complete-parens)
    (use-package py-autopep8
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
      (message "py-autopep8 loaded"))
      (message "elpy loaded"))
#+END_SRC
*** Indent 2 spaces

#+BEGIN_SRC emacs-lisp
  (setq python-indent 2)
#+END_SRC
*** =python-django=
Django project management package

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/python-django.el")
  (require 'python-django)
#+END_SRC
** Emacs Lisp
*** =paredit=
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :load-path "~/.emacs.d/resources/paredit"
    :config
    (message "paredit loaded"))
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC

* Version Control
=magit= is a git porcelain for emacs

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    ;;open magit-status in a fullframe buffer
    (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
    (setq magit-completing-read-function 'ivy-completing-read)
    (message "magit loaded")
    :bind (
           ("C-x g" . magit-status)))
#+END_SRC

* Task management
=org-mode= preferences

** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
#+END_SRC
** =org-mode= key bindings

#+BEGIN_SRC emacs-lisp
  (bind-key "C-M-w" 'append-next-kill org-mode-map)
  (bind-key "C-c t" 'org-show-todo-tree org-mode-map)
  (bind-key "C-c r" 'org-refile org-mode-map)
#+END_SRC
** Display preferences
Theme specific settings

#+BEGIN_SRC emacs-lisp
(setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC
** Source code editing

Use syntax highlighting in source blocks while editing

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable smartparens

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'smartparens-mode)
#+END_SRC
** =org-drill=

#+BEGIN_SRC emacs-lisp
  (use-package org-drill
    :config
    (add-to-list 'load-path "~/.emacs.d/resources/org-learn.el")
    (add-to-list 'load-path "~/.emacs.d/resources/org-drill.el")
    (require 'org-drill)
    (setq org-drill-spaced-repetition-algorithm 'sm2)
    (message "org-drill loaded"))
#+END_SRC
** =org-capture=

#+BEGIN_SRC emacs-lisp
  (defvar gtd-collection-bucket "~/Dropbox/Org/organizer/collection_bucket.org")
  (setq org-default-notes-file "~/Dropbox/Org/notes.org")
  (setq org-capture-templates
   '(("c" "Templates for collecting thoughts and ideas")
     ("ca" "Articles/Links" entry (file+headline gtd-collection-bucket "Articles/Links")
        "* [[%^{Link}][%^{Description}]]\n  - Captured on %t" :immediate-finish t)
     ("cb" "Books" entry (file+headline gtd-collection-bucket "Books")
      "* Read %^{Book}, by %^{Author}\n  - Captured on %t" :immediate-finish t)
     ("cc" "College" entry (file+headline gtd-collection-bucket "College")
      "* %?\n  - Captured on %t")
     ("cd" "Dreams" entry (file+headline gtd-collection-bucket "Dreams")
      "* %?\n  - Captured on %t")
     ("cf" "Food and restaurants" entry (file+headline gtd-collection-bucket "Food/Restaurants")
      "* %?\n  - Captured on %t")
     ("cg" "Goals" entry (file+headline gtd-collection-bucket "Goals")
      "* %?\n  - Captured on %t")
     ("ch" "Habits" entry (file+headline gtd-collection-bucket "Habits")
      "* %?\n  - Captured on %t")
     ("ci" "Ideas" entry (file+headline gtd-collection-bucket "Ideas")
      "* %?\n  - Captured on %t")
     ("cl" "Learn" entry (file+headline gtd-collection-bucket "Learn")
      "* %^{Learn}\n  - Captured on %t" :immediate-finish t)
     ("cm" "Movies" entry (file+headline gtd-collection-bucket "Movies")
      "* Watch %^{Watch}\n  - Captured on %t" :immediate-finish t)
     ("co" "Others" entry (file+headline gtd-collection-bucket "Others")
      "* %?\n  - Captured on %t")
     ("cp" "Purchase" entry (file+headline gtd-collection-bucket "Purchase")
      "* Buy %^{Buy}\n  - Captured on %t" :immediate-finish t)
     ("ct" "TV series/Anime" entry (file+headline gtd-collection-bucket "TV series/Anime")
      "* Watch %^{Watch}\n  - Captured on %t" :immediate-finish t)
     ("cv" "Videos" entry (file+headline gtd-collection-bucket "Videos")
        "* [[%^{Link}][%^{Description}]]\n  - Captured on %t" :immediate-finish t)
     ("cw" "Work" entry (file+headline gtd-collection-bucket "Work")
      "* %?\n  - Captured on %t")
     ("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
      "* TODO %?\n  %i\n  %a")
     ("v" "Vocabulary" entry (file+headline "~/Dropbox/Org/GRE/vocabulary.org" "Vocabulary")
      "* Word :drill:\n %^{word}\n** Meaning \n%^{meaning}")))
#+END_SRC
** =org-journal=

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :config
    (setq org-journal-dir "~/Dropbox/Org/journal/")
    (setq org-journal-date-format "%A, %d-%B-%Y"))
#+END_SRC
** Tasks and states

*** Todo Keywords and keyword faces

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
#+END_SRC
*** Fast todo selection

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
#+END_SRC
*** Skipping processing

This setting allows changing todo states with S-left and S-right skipping all of the normal processing when entering or leaving a todo state. This cycles through the todo states but skips setting timestamps and entering notes.

#+BEGIN_SRC emacs-lisp
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC
*** Todo state triggers

Used to automatically assign tags to tasks based on state changes.
Following are the rules:
 - Moving a task to =CANCELLED= adds a =CANCELLED= tag
 - Moving a task to =WAITING= adds a =WAITING= tag
 - Moving a task to =HOLD= adds =WAITING= and =HOLD= tags
 - Moving a task to =DONE= state removes =WAITING= and =HOLD= tags
 - Moving a task to =TODO= removes =WAITING=, =CANCELLED=, and =HOLD= tags
 - Moving a task to =NEXT= removes =WAITING=, =CANCELLED=, and =HOLD= tags
 - Moving a task to =DONE= removes =WAITING=, =CANCELLED=, and =HOLD= tags

#+BEGIN_SRC emacs-lisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
** =org-agenda=

*** Files to scan for agenda views

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/Org/organizer/collection_bucket.org"
                           "~/Dropbox/Org/organizer/next_actions.org"
                           "~/Dropbox/Org/organizer/projects.org"
                           "~/Dropbox/Org/organizer/someday_maybe.org"
                           "~/Dropbox/Org/organizer/waiting.org"))
#+END_SRC
** =org-refile=

Include current file and any file contributing to the agenda upto 9 levels deep in
=org-refile= targets

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
#+END_SRC

Allow refile to create parent tasks with confirmation

#+BEGIN_SRC emacs-lisp
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

Logging

#+BEGIN_SRC emacs-lisp
  (setq org-log-refile t)
#+END_SRC

* Utility functions
** Insert current date and time

#+BEGIN_SRC emacs-lisp
  (defvar current-date-time-format "%d-%b-%Y %k:%M"
    "Format of date to insert with `insert-current-date-time' func See help of `format-time-string' for possible replacements")

  (defvar current-time-format "%k:%M:%S"
    "Format of date to insert with `insert-current-time' func.Note the weekly scope of the command's precision.")

  (defun insert-current-date-time ()
    "insert the current date and time into current buffer.Uses `current-date-time-format' for the formatting the date/time."
         (interactive)
         (insert (format-time-string current-date-time-format (current-time)))
         )

  (defun insert-current-time ()
    "insert the current time (1-week scope) into the current buffer."
         (interactive)
         (insert (format-time-string current-time-format (current-time)))
         )

  (global-set-key (kbd "C-x C-d") 'insert-current-date-time)
  (global-set-key (kbd "C-x C-t") 'insert-current-time)
#+END_SRC
** Splitting windows

#+BEGIN_SRC emacs-lisp
  (defun split-window-right-and-move-cursor ()
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun split-window-below-and-move-cursor ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (substitute-key-definition 'split-window-right 'split-window-right-and-move-cursor global-map)
  (substitute-key-definition 'split-window-below 'split-window-below-and-move-cursor global-map)
#+END_SRC

* Editing settings
** Enable visual line mode

#+BEGIN_SRC emacs-lisp
  (visual-line-mode t)
#+END_SRC
** Always kill current buffer

#+BEGIN_SRC emacs-lisp
 (substitute-key-definition 'kill-buffer 'kill-buffer-and-its-windows global-map)
#+END_SRC
** =company-mode= settings
*** Use =company-mode= globally

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
*** Set idle-delay

#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0)
#+END_SRC
*** Set minimum prefix length

#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 3)
#+END_SRC
*** Show numbers

#+BEGIN_SRC emacs-lisp
  (setq company-show-numbers t)
#+END_SRC
** Always indent with spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** =multiple cursors=
Multiple cursors like Sublime Text

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :config
    (message "multiple-cursors loaded")
    :bind (
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC
** line editing
*** Copying curent line

#+BEGIN_SRC emacs-lisp
  (defun quick-copy-line ()
        "Copy the whole line that point is on and move to the beginning of the next line.
      Consecutive calls to this command append each line to the
      kill-ring."
        (interactive)
        (let ((beg (line-beginning-position 1))
              (end (line-beginning-position 2)))
          (if (eq last-command 'quick-copy-line)
              (kill-append (buffer-substring beg end) (< end beg))
            (kill-new (buffer-substring beg end))))
        (beginning-of-line 2))
  (global-set-key (kbd "C-S-C") 'quick-copy-line)
#+END_SRC
*** Cutting current line

#+BEGIN_SRC emacs-lisp
  (defun quick-cut-line ()
    "Cut the whole line that point is on.  Consecutive calls to this command append each line to the kill-ring."
    (interactive)
    (let ((beg (line-beginning-position 1))
          (end (line-beginning-position 2)))
      (if (eq last-command 'quick-cut-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-new (buffer-substring beg end)))
      (delete-region beg end))
    (beginning-of-line 1)
    (setq this-command 'quick-cut-line))
  (global-set-key (kbd "C-S-D") 'quick-cut-line)
#+END_SRC
*** Moving lines

#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move the line up and place the point at the beginning of the line"
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    "Move the line down and place the point at the beginning of the line"
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))

  (global-set-key (kbd "C-S-K") 'move-line-down)
  (global-set-key (kbd "C-S-I") 'move-line-up)
#+END_SRC
** Smooth scrolling

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/smooth-scrolling.el")
  (require 'smooth-scrolling)
  (setq linum-delay t)
  (setq auto-window-vscroll nil)
  (setq scroll-conservatively 10000)
  (setq auto-save-interval 500)
  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** Easy navigation

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-navigation (:hint nil
                                  :color pink)
  ("l" forward-char)
  ("j" backward-char)
  ("k" next-line)
  ("i" previous-line)
  ("w" scroll-down-command)
  ("s" scroll-up-command)
  ("a" backward-word)
  ("d" forward-word)
  ("q" nil "quit"))
  (global-set-key (kbd "C-n") 'hydra-navigation/body)
#+END_SRC

* Set =custom-file= location

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC

* Custom key bindings

#+BEGIN_SRC emacs-lisp
   ;; custom key bindings
  (global-set-key (kbd "C-x C-q") 'save-buffers-kill-terminal) ;; was C-x C-c, overrides read-only-mode
  (global-set-key (kbd "C-;") 'set-mark-command) ;; was C-Space

  ;; easy navigation
  (global-set-key (kbd "C-i") 'previous-line) ;;
  (global-set-key (kbd "C-j") 'backward-char) ;;
  (global-set-key (kbd "C-k") 'next-line) ;;
  (global-set-key (kbd "C-l") 'forward-char) ;;

  (global-set-key (kbd "M-k") 'scroll-up-command)
  (global-set-key (kbd "M-i") 'scroll-down-command)
  (global-set-key (kbd "M-j") 'backward-word) ;;
  (global-set-key (kbd "M-l") 'forward-word) ;;

  (global-set-key (kbd "C-s") 'save-buffer) ;;
  (global-set-key (kbd "C-r") (lambda () (interactive) (recenter-top-bottom 0)))
  (setq persp-keymap-prefix (kbd "C-c w"))
#+END_SRC
